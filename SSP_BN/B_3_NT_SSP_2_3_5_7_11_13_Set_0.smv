--Auto Subset Sum [2, 3, 5, 7, 11, 13]
-------------------------------
MODULE main
VAR
	row: 0..41;
	column: 0..41;
	junction: {pass, split};
	dir: {dwn, diag};
	flag: boolean;
	sum: 0..42;
	xsum: 0..42;

ASSIGN
	init(row) := 0;
	init(column) := 0;
	init(junction) := split;
	init(dir) := dwn;
	init(flag) := FALSE;
	init(sum) := 42;
	init(xsum) := 42;



	--Always advance to next row
	next(row) := (row + 1) mod 42;

	--Flag turns on when row is 41
	next(flag) := (next(row) = 41 ? TRUE : FALSE);

	--Split junctions at rows 0, 2, 5, 10, 17, 28
	next(junction) :=
					case
						((next(row) = 0)|(next(row) = 2)|(next(row) = 5)|(next(row) = 10)|(next(row) = 17)|(next(row) = 28)): split;
						TRUE: pass;
					esac;

	--Decide direction for next move by to current junction
	next(dir) :=
					case
						((row = 17) & (column = 17)): dwn;
						(junction = split): {dwn, diag};
						(junction = pass): dir;
						TRUE: {dwn, diag};
					esac;

	--If diag, increase column, otherwise dwn, same column
	next(column) :=
					case
						(next(row) = 0): 0;
						(next(dir) = diag): (column + 1) mod 42;
						(next(dir) = dwn): column;
						TRUE: column;
					esac;

	--Pick random sum and xsum after initial state
	next(sum) := (sum = 42 ? {0, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 41} : sum);
	next(xsum) := (xsum = 42 ? {1, 4, 6, 35, 37, 40} : xsum);
--Valid Network:	Spec returns true, the network always exits on a valid sum
--Invalid Network:	Spec returns false, there exists a non-reachable valid sum. Counter-example shows one non-reachable valid sum
CTLSPEC	NAME	csum := !(EX (AG ((flag = FALSE) | (!(column = sum)))));
--Valid Network:	Spec returns true, there exists no path to an invalid sum
--Invalid Network:	Spec returns false, there exists a path to an invalid sum. Counter-example shows one reachable invalid sum
CTLSPEC	NAME	nsum := !(EF ((flag = TRUE) & (column = xsum)));
