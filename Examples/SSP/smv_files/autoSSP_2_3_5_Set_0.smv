--Auto Subset Sum [2, 3, 5]
-------------------------------
MODULE main
VAR
	row: 0..10;
	column: 0..10;
	junction: {pass, split};
	dir: {dwn, diag};
	flag: boolean;
	tag: array 0..9 of boolean;

ASSIGN
	init(row) := 0;
	init(column) := 0;
	init(junction) := split;
	init(dir) := dwn;
	init(flag) := FALSE;

	init(tag[0]) := FALSE;		init(tag[1]) := FALSE;		init(tag[2]) := FALSE;		init(tag[3]) := FALSE;		init(tag[4]) := FALSE;
	init(tag[5]) := FALSE;		init(tag[6]) := FALSE;		init(tag[7]) := FALSE;		init(tag[8]) := FALSE;		init(tag[9]) := FALSE;


	--Always advance to next row
	next(row) := (row + 1) mod 11;

	--Flag turns on when row is 10
	next(flag) := (next(row) = 10 ? TRUE : FALSE);

	--Split junctions at rows 0, 2, 5
	next(junction) :=
					case
						((next(row) = 0)|(next(row) = 2)|(next(row) = 5)): split;
						TRUE: pass;
					esac;

	--Decide direction for next move by to current junction
	next(dir) :=
					case
						(junction = split): {dwn, diag};
						(junction = pass): dir;
						TRUE: {dwn, diag};
					esac;

	--If diag, increase column, otherwise dwn, same column
	next(column) :=
					case
						(next(row) = 0): 0;
						(next(dir) = diag): (column + 1) mod 11;
						(next(dir) = dwn): column;
						TRUE: column;
					esac;

	--Set tag TRUE if curr row = split, dir = diag
	next(tag[0]) :=
					case
						(row = 0) & (column = 0) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[0];
					esac;

	next(tag[1]) :=
					case
						(row = 2) & (column = 0) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[1];
					esac;

	next(tag[2]) :=
					case
						(row = 2) & (column = 1) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[2];
					esac;

	next(tag[3]) :=
					case
						(row = 2) & (column = 2) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[3];
					esac;

	next(tag[4]) :=
					case
						(row = 5) & (column = 0) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[4];
					esac;

	next(tag[5]) :=
					case
						(row = 5) & (column = 1) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[5];
					esac;

	next(tag[6]) :=
					case
						(row = 5) & (column = 2) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[6];
					esac;

	next(tag[7]) :=
					case
						(row = 5) & (column = 3) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[7];
					esac;

	next(tag[8]) :=
					case
						(row = 5) & (column = 4) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[8];
					esac;

	next(tag[9]) :=
					case
						(row = 5) & (column = 5) & next(dir) = diag: TRUE;
						(next(row) = 0): FALSE;
						TRUE: tag[9];
					esac;

LTLSPEC	NAME	ltl_0 := G! ((flag = TRUE) & (column = 0));
CTLSPEC	NAME	ctl_0 := EF ((flag = TRUE) & (column = 0));
LTLSPEC	NAME	ltl_1 := G! ((flag = TRUE) & (column = 1));
CTLSPEC	NAME	ctl_1 := EF ((flag = TRUE) & (column = 1));
LTLSPEC	NAME	ltl_2 := G! ((flag = TRUE) & (column = 2));
CTLSPEC	NAME	ctl_2 := EF ((flag = TRUE) & (column = 2));
LTLSPEC	NAME	ltl_3 := G! ((flag = TRUE) & (column = 3));
CTLSPEC	NAME	ctl_3 := EF ((flag = TRUE) & (column = 3));
LTLSPEC	NAME	ltl_4 := G! ((flag = TRUE) & (column = 4));
CTLSPEC	NAME	ctl_4 := EF ((flag = TRUE) & (column = 4));
LTLSPEC	NAME	ltl_5 := G! ((flag = TRUE) & (column = 5));
CTLSPEC	NAME	ctl_5 := EF ((flag = TRUE) & (column = 5));
LTLSPEC	NAME	ltl_6 := G! ((flag = TRUE) & (column = 6));
CTLSPEC	NAME	ctl_6 := EF ((flag = TRUE) & (column = 6));
LTLSPEC	NAME	ltl_7 := G! ((flag = TRUE) & (column = 7));
CTLSPEC	NAME	ctl_7 := EF ((flag = TRUE) & (column = 7));
LTLSPEC	NAME	ltl_8 := G! ((flag = TRUE) & (column = 8));
CTLSPEC	NAME	ctl_8 := EF ((flag = TRUE) & (column = 8));
LTLSPEC	NAME	ltl_9 := G! ((flag = TRUE) & (column = 9));
CTLSPEC	NAME	ctl_9 := EF ((flag = TRUE) & (column = 9));
LTLSPEC	NAME	ltl_10 := G! ((flag = TRUE) & (column = 10));
CTLSPEC	NAME	ctl_10 := EF ((flag = TRUE) & (column = 10));
